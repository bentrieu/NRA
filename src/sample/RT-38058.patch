diff --git a/modules/controls/src/main/java/com/sun/javafx/scene/control/skin/PaginationSkin.java b/modules/controls/src/main/java/com/sun/javafx/scene/control/skin/PaginationSkin.java
--- a/modules/controls/src/main/java/com/sun/javafx/scene/control/skin/PaginationSkin.java
+++ b/modules/controls/src/main/java/com/sun/javafx/scene/control/skin/PaginationSkin.java
@@ -44,6 +44,8 @@
 import javafx.application.Platform;
 import javafx.beans.property.BooleanProperty;
 import javafx.beans.property.ObjectProperty;
+import javafx.beans.value.ChangeListener;
+import javafx.beans.value.ObservableValue;
 import javafx.beans.value.WritableValue;
 import javafx.collections.ListChangeListener;
 import javafx.css.Styleable;
@@ -114,9 +116,7 @@
         getChildren().addAll(currentStackPane, nextStackPane, navigation);
 
         pagination.maxPageIndicatorCountProperty().addListener(o -> {
-            resetIndexes(false);
-            navigation.initializePageIndicators();
-            navigation.updatePageIndicators();
+            resetIndiciesAndNav();
         });
 
         registerChangeListener(pagination.widthProperty(), "WIDTH");
@@ -127,6 +127,12 @@
         initializeSwipeAndTouchHandlers();
     }
 
+    protected void resetIndiciesAndNav() {
+        resetIndexes(false);
+        navigation.initializePageIndicators();
+        navigation.updatePageIndicators();
+    }
+
     public void selectNext() {
         if (getCurrentPageIndex() < getPageCount() - 1) {
             pagination.setCurrentPageIndex(getCurrentPageIndex() + 1);
@@ -648,19 +654,13 @@
                 // Speedup and finish the animation then update the page factory.
                 timeline.setRate(8);
                 timeline.setOnFinished(arg0 -> {
-                    resetIndexes(false);
-                    navigation.initializePageIndicators();
-                    navigation.updatePageIndicators();
+                    resetIndiciesAndNav();
                 });
                 return;
             }
-            resetIndexes(false);
-            navigation.initializePageIndicators();
-            navigation.updatePageIndicators();
+            resetIndiciesAndNav();
         } else if ("PAGE_COUNT".equals(p)) {
-            resetIndexes(false);
-            navigation.initializePageIndicators();
-            navigation.updatePageIndicators();
+            resetIndiciesAndNav();
         } else if ("WIDTH".equals(p)) {
             clipRect.setWidth(getSkinnable().getWidth());
         } else if ("HEIGHT".equals(p)) {
@@ -824,7 +824,7 @@
         private void initializePageIndicators() {
             previousIndicatorCount = 0;
             controlBox.getChildren().clear();
-            indicatorButtons.getToggles().clear();
+            clearIndicatorButtons();
 
             controlBox.getChildren().add(leftArrowButton);
             for (int i = fromIndex; i <= toIndex; i++) {
@@ -836,6 +836,16 @@
             controlBox.getChildren().add(rightArrowButton);
         }
 
+        private void clearIndicatorButtons() {
+            for (Toggle toggle : indicatorButtons.getToggles()) {
+                if (toggle instanceof IndicatorButton) {
+                    IndicatorButton indicatorButton = (IndicatorButton) toggle;
+                    indicatorButton.release();
+                }
+            }
+            indicatorButtons.getToggles().clear();
+        }
+
         // Finds and selects the IndicatorButton using the currentIndex.
          private void updatePageIndicators() {
             for (int i = 0; i < indicatorButtons.getToggles().size(); i++) {
@@ -1175,6 +1185,9 @@
     }
 
     class IndicatorButton extends ToggleButton {
+        private final UpdateSkinIndicatorType updateSkinIndicatorType = new UpdateSkinIndicatorType();
+        private final UpdateTooltipVisibility updateTooltipVisibility = new UpdateTooltipVisibility();
+
         private int pageNumber;
 
         public IndicatorButton(int pageNumber) {
@@ -1183,9 +1196,7 @@
             setIndicatorType();
             setTooltipVisible(isTooltipVisible());
 
-            getSkinnable().getStyleClass().addListener((ListChangeListener<String>) change -> {
-                setIndicatorType();
-            });
+            getSkinnable().getStyleClass().addListener(updateSkinIndicatorType);
 
             setOnAction(new EventHandler<ActionEvent>() {
                 @Override public void handle(ActionEvent arg0) {
@@ -1198,9 +1209,7 @@
                 }
             });
 
-            tooltipVisibleProperty().addListener((ov, oldValue, newValue) -> {
-                setTooltipVisible(newValue);
-            });
+            tooltipVisibleProperty().addListener(updateTooltipVisibility);
 
             prefHeightProperty().bind(minHeightProperty());
             setAccessibleRole(AccessibleRole.PAGE_ITEM);
@@ -1243,6 +1252,11 @@
             }
         }
 
+        public void release() {
+            getSkinnable().getStyleClass().removeListener(updateSkinIndicatorType);
+            tooltipVisibleProperty().removeListener(updateTooltipVisibility);
+        }
+
         @Override
         public Object queryAccessibleAttribute(AccessibleAttribute attribute, Object... parameters) {
             switch (attribute) {
@@ -1261,6 +1275,20 @@
                 default: super.executeAccessibleAction(action);
             }
         }
+
+        private class UpdateSkinIndicatorType implements ListChangeListener<String> {
+            @Override
+            public void onChanged(Change<? extends String> change) {
+                setIndicatorType();
+            }
+        }
+
+        private class UpdateTooltipVisibility implements ChangeListener<Boolean> {
+            @Override
+            public void changed(ObservableValue<? extends Boolean> ov, Boolean oldValue, Boolean newValue) {
+                setTooltipVisible(newValue);
+            }
+        }
     }
 
     /***************************************************************************
